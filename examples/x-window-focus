# -*- python -*-

# This configuration scripts can change the adjustment settings
# depending on that window is in focus, by class or title.
# However this is actually window manager dependent and have
# only been tested on twm and xmonad.


# Copyright © 2014, 2015, 2016, 2017  Mattias Andrée (m@maandree.se)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# This requires that python3-xlib is installed.


import Xlib.display


# The (zero-based) indices of the monitors
# (CRTC:s) to apply settings to
monitors = [0, 1]

# Gamma (red, green and blue), per monitor
gammas = [[1.16, 1.15, 1.11],
          [1.10, 1.16, 1.10]]

# The colour temperature for normal applications
standard_temperature = 3500

# The brightness for normal applications
standard_brightness = 0.8

# Acquire connection to X
x_display = Xlib.display.Display()
# Get root windows for each screen and list on most events
mask  = ((1 <<  2) - 1) ^ ((1 <<  0) - 1)
mask |= ((1 << 14) - 1) ^ ((1 <<  3) - 1)
mask |= ((1 << 20) - 1) ^ ((1 << 15) - 1)
mask |= ((1 << 25) - 1) ^ ((1 << 21) - 1)
for x_screen_i in range(x_display.screen_count()):
    x_screen = x_display.screen(x_screen_i)
    x_root = x_screen.root
    x_root.change_attributes(event_mask = mask)
x_display.flush()

# Close X connection on exit
close_c_bindings_ = close_c_bindings
def close_c_bindings():
    close_c_bindings_()
    x_display.close()


def reset():
    '''
    Invoked to reset the displays
    '''
    for monitor in range(len(monitors)):
        start_over()
        gamma(*gammas[monitor])
        randr(monitors[monitor])


wait_period = 0
'''
:float  The number of seconds to wait before invoking `periodically` again
'''

fadein_time = None
'''
:float?  The number of seconds used to fade in on start, `None` for no fading
'''

fadeout_time = None
'''
:float?  The number of seconds used to fade out on exit, `None` for no fading
'''


last = None
def periodically(year, month, day, hour, minute, second, weekday, fade):
    '''
    Invoked periodically
    
    If you want to control at what to invoke this function next time
    you can set the value of the global variable `wait_period` to the
    number of seconds to wait before invoking this function again.
    The value does not need to be an integer.
    
    @param  year:int     The year
    @param  month:int    The month, 1 = January, 12 = December
    @param  day:int      The day, minimum value is 1, probable maximum value is 31 (*)
    @param  hour:int     The hour, minimum value is 0, maximum value is 23
    @param  minute:int   The minute, minimum value is 0, maximum value is 59
    @param  second:int   The second, minimum value is 0, probable maximum value is 60 (**)
    @param  weekday:int  The weekday, 1 = Monday, 7 = Sunday
    @param  fade:float?  Blueshift can use this function to fade into a state when it start
                         or exits. `fade` can either be negative, zero or positive or `None`,
                         but the magnitude of value cannot exceed 1. When Blueshift starts,
                         the this function will be invoked multiple with the time parameters
                         of the time it is invoked and each time `fade` will increase towards
                         1, starting at 0, when the value is 1, the settings should be applied
                         to 100 %. After this this function will be invoked once again with
                         `fade` being `None`. When Blueshift exits the same behaviour is used
                         except, `fade` decrease towards -1 but start slightly below 0, when
                         -1 is reached all settings should be normal. Then Blueshift will NOT
                         invoke this function with `fade` being `None`, instead it will by
                         itself revert all settings and quit.
    
    (*)  Can be exceeded if the calendar system is changed, like in 1712-(02)Feb-30
    (**) See https://en.wikipedia.org/wiki/Leap_second
    '''
    global last
    
    try:
        # Get focused window
        window = x_display.get_input_focus().focus
        if isinstance(window, int):
            x_display.next_event()
            return
        
        # Get window specifications
        wm_class = window.get_wm_class()
        wm_name = None
        try:
            wm_name = window.get_wm_name()
        except:
            pass ## Buf in python3-xlib (?)
        if (wm_class is None) and (wm_name is None):
            x_display.next_event()
            return
        if (wm_name is not None) and (not isinstance(wm_name, str)):
            wm_name = wm_name.decode('utf-8', 'replace')
        window = (None if wm_class is None else wm_class[0],
                  None if wm_class is None else wm_class[1],
                  wm_name)
        #print(window)
    except:
        x_display.next_event()
        return
    
    # Check that something changed
    if (last is not None) and (last == window):
        x_display.next_event()
        return
    last = window
    
    # Update adjustments
    for monitor in range(len(monitors)):
        start_over()
        temp = standard_temperature
        bright = standard_brightness
        
        if window[0] in ('Dooble', 'claws-mail'):
            temp = 2000
            bright = 0.5
        elif window[0] == 'inkscape':
            temp = 6500
            bright = 1.0
        elif window[0].startswith('gimp-'): # continues with the version number
            temp = 6500
            bright = 1.0
        
        cie_brightness(bright)
        temperature(temp, lambda t : clip_whitepoint(divide_by_maximum(cmf_10deg(t))))
        gamma(*gammas[monitor])
        randr(monitors[monitor])
    
    # Wait for next update
    x_display.next_event()

